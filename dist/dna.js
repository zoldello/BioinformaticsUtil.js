"use strict";function sanitizeDNAString(r){return r.trim().toUpperCase()}function complement(r){var e=[],t=sanitizeDNAString(r),i=!0,n=!1,a=void 0;try{for(var o,s=t[Symbol.iterator]();!(i=(o=s.next()).done);i=!0){var l=o.value;switch(l){case"A":e.push("T");break;case"T":e.push("A");break;case"G":e.push("C");break;case"C":e.push("G");break;default:throw console&&console.log&&console.log("Invalid nucleotide "+l+" in string: "+r+", managed to get past: isValid. Check for errors in unit test"),"Invalid nucleotides: "+l+" in string: "+r}}}catch(u){n=!0,a=u}finally{try{!i&&s["return"]&&s["return"]()}finally{if(n)throw a}}return e.join("")}function sanitizeDNAString(r){return r.trim().toUpperCase()}function getCount(r){var e=void 0,t={A:0,C:0,T:0,G:0};e=sanitizeDNAString(r);var i=!0,n=!1,a=void 0;try{for(var o,s=e[Symbol.iterator]();!(i=(o=s.next()).done);i=!0){var l=o.value;t[l]=t[l]+1}}catch(u){n=!0,a=u}finally{try{!i&&s["return"]&&s["return"]()}finally{if(n)throw a}}return[t.A,t.C,t.G,t.T].join(" ")}function isValid(r){var e=void 0,t=!0;if(!r||"string"!=typeof r)return!1;e=r.trim().toUpperCase();var i=!0,n=!1,a=void 0;try{for(var o,s=e[Symbol.iterator]();!(i=(o=s.next()).done);i=!0){var l=o.value;if("A"!==l&&"C"!==l&&"G"!==l&&"T"!==l){t=!1;break}}}catch(u){n=!0,a=u}finally{try{!i&&s["return"]&&s["return"]()}finally{if(n)throw a}}return t}function sanitizeDNAString(r){return r.trim().toUpperCase()}function reverse(r){var e=sanitizeDNAString(r);return e.split("").reverse().join("")}function sanitizeDNAString(r){return r.trim().toUpperCase()}function invalidDNAMessage(r){return"Invalid DNA string: "+r}Object.defineProperty(exports,"__esModule",{value:!0}),exports.complement=complement,exports.getCount=getCount,exports.isValid=isValid,exports.reverse=reverse,exports.sanitizeDNAString=sanitizeDNAString,exports.invalidDNAMessage=invalidDNAMessage;